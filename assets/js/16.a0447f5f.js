(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{416:function(t,s,a){"use strict";a.r(s);var e=a(56),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"whistle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#whistle"}},[t._v("#")]),t._v(" "),a("a",{attrs:{href:"http://wproxy.org/whistle/",target:"_blank",rel:"noopener noreferrer"}},[t._v("whistle"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"whistle-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#whistle-是什么"}},[t._v("#")]),t._v(" whistle 是什么?")]),t._v(" "),a("p",[t._v("官方解读:\n基于 Node 实现的跨平台 web 调试代理工具，类似的工具有 Windows 平台上的 Fiddler，主要用于查看、修改 HTTP、HTTPS、Websocket 的请求、响应，也可以作为 HTTP 代理服务器使用，不同于 Fiddler 通过断点修改请求响应的方式，whistle 采用的是类似配置系统 hosts 的方式，一切操作都可以通过配置实现，支持域名、路径、正则表达式、通配符、通配路径等多种匹配方式，且可以通过 Node 模块扩展功能：")]),t._v(" "),a("p",[t._v('通过以上解读,我们可以抓取到几个关键字: "修改 HTTP/HTTPS/Websocket 的请求","作为 HTTP 代理服务器","修改请求响应"等功能.那我就在以下介绍几个我日常中会用到的功能.')]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("h3",{attrs:{id:"whistle-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#whistle-安装"}},[t._v("#")]),t._v(" whistle 安装")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# whistle也是一个npm包,所以可以通过npm来安装")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g whistle\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装完成之后,可以通过以下命令来验证")]),t._v("\nw2 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v("\n\n Usage: whistle "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n  Commands:\n\n  status              Show the running status of whistle\n  use/add "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filepath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  Set rules from a specified js "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".whistle.js by default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  run                 Start a front "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v("\n  start               Start a background "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v("\n  stop                Stop current background "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v("\n  restart             Restart current background "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("service")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v("                Display "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("help")]),t._v(" information\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),a("h3",{attrs:{id:"switchyomega-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switchyomega-安装"}},[t._v("#")]),t._v(" SwitchyOmega 安装")]),t._v(" "),a("p",[t._v("这个插件主要用于浏览器代理,方便切换一些代理源.\n我们可以在 chrome 的扩展程序中找到这个插件,然后进行安装即可.安装成功之后,就可以在插件列表看到了\n"),a("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/14/571686e4fc0b7a65.png",alt:"images"}}),t._v("\n然后进入这个插件列表进行一些配置\n"),a("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/14/394c8c01a79a423a.png",alt:"images"}}),t._v("\n然后\n"),a("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/14/79deeacf2d482423.png",alt:"images"}}),t._v("\n然后\n"),a("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/14/7ff41dc1a598f183.png",alt:"images"}}),t._v("\n到这里我们就完成了 whistle 的配置啦.\n然后我们启动我们的 whistle")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("w2 start\n")])])]),a("p",[a("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/14/8472d14e82f838bd.png",alt:"images"}}),t._v("\n然后我们在打开http://127.0.0.1:8899/#network,在这里我们可以看到whistle的页面啦.\n"),a("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/14/18572ae03ec3d9ef.png",alt:"images"}})]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("现在我们来安装一下 HTTPS 的证书,这样后面我们就可以抓取到 https 的请求.\n"),a("img",{attrs:{src:"https://i.bmp.ovh/imgs/2022/05/14/3dd89b74e7187205.png",alt:"images"}}),t._v("\n安装完成之后,我们随便在 chrome 中输入一个地址,比如https://www.baidu.com/.然后在切换到whistle的network页面,此时我们就可以看到打开百度这个页面的请求啦\n"),a("img",{attrs:{src:"https://s3.bmp.ovh/imgs/2022/05/14/839a2381c77e53ac.jpg",alt:"images"}})]),t._v(" "),a("h2",{attrs:{id:"代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理")]),t._v(" "),a("h2",{attrs:{id:"日常开发的过程中-由于前端开发环境域名-localhost-xxx-和后端的域名不一样导致我们在日常开发的过程中会遇到跨域-cookie-在请求的过程中没有携带等的情况-那么我们用-whistle-如何解决呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日常开发的过程中-由于前端开发环境域名-localhost-xxx-和后端的域名不一样导致我们在日常开发的过程中会遇到跨域-cookie-在请求的过程中没有携带等的情况-那么我们用-whistle-如何解决呢"}},[t._v("#")]),t._v(" 日常开发的过程中,由于前端开发环境域名(localhost:xxx)和后端的域名不一样导致我们在日常开发的过程中会遇到跨域,cookie 在请求的过程中没有携带等的情况.那么我们用 whistle 如何解决呢?")]),t._v(" "),a("ol",[a("li",[t._v("nginx 做中间层代理")]),t._v(" "),a("li",[t._v("nginx 做转发")]),t._v(" "),a("li",[t._v("webpack.devserver.proxy 做转发")]),t._v(" "),a("li",[t._v("whistle")]),t._v(" "),a("li",[t._v("...还有很多其他的方法\n那么我们这里是介绍 whistle,当然用 whistle 的方法了.\n比如我们我们前端的项目启动的域名是(localhost:8080),后端的服务器域名是http://www.test.com/api.此时我们可以在whistle的rules配置里面进行配置")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这里的意思是,把www.test.com这个域名转发到localhost:8081的页面上")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此时我们在浏览器打开http://www.test.com即可.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# excludeFilter的意思是除了www.test.com/api/下面的接口,后面在讲解,这里做个伏笔.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这样我们在访问www.test.com请求后端服务器的时候,都会把请求发到www.test.com/api/上了,cookie也会相应的带上")]),t._v("\nhttp://www.test.com http://localhost:8081 excludeFilter://^www.test.com/api/*\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https的也可以哦,是不是很方便")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# https://www.test.com http://localhost:8081 excludeFilter://^www.test.com/api/*")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://s3.bmp.ovh/imgs/2022/05/14/2d99eee6111f16f7.jpg",alt:"images"}}),t._v("\n然后通过 http://www.test.com/访问即可.\n"),a("img",{attrs:{src:"https://s3.bmp.ovh/imgs/2022/05/14/a894e3d31053e682.jpg",alt:"images"}}),t._v("\n这样我们就完成了接口代理啦,是不是比在 nginx 那些配置还方便灵活呢.")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("如果此时我们需要请求服务端的接口,比如是/api/v1/goods 该怎么办呢?")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里用axios做简单的演示")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" axios "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"axios"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" axios"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的开发环境就用 “/”就好,因为当你不输入域名前缀的时候,请求服务器的接口就会紧跟在当前访问域名的接口后面,下面做演示.其他环境你可以做相应的区分")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("baseURL")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里就会请求到 http://www.test.com/api/v1/goods")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 还记得我们在whistle做的伏笔吗,那里excludeFilter://^www.test.com/api/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的excludeFilter://^www.test.com/api/指的是www.test.com/api/不会走代理指向http://localhost:8081 .")]),t._v("\ninstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/api/v1/goods"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("看了以上代码是不是觉得很方便呢,这里我们不单指解决了跨域的问题,也可能顺便解决了 cookie 传送的问题哦.")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("上面的域名和本地开发环境的,我们也可以用在不同的环境上.\n比如")]),t._v(" "),a("ul",[a("li",[t._v("测试环境是 www.test.com")]),t._v(" "),a("li",[t._v("预发布环境是 www.uat.com")]),t._v(" "),a("li",[t._v("生产环境是 www.prod.com")])]),t._v(" "),a("p",[t._v("我们通通都可以通过代理来解决以此来达到本地开发环境切换到不同环境的效果哦.加快了我们调试的速度.当然,我们也可以针对某个请求来做一些操作(比如,针对某个请求增加请求头,cookie;针对某个响应数据做一些数据的更改都是可以的).这里就不一一介绍啦,想要知道如何实现可以观看官方文档,我这里介绍的是平常开发环境下会遇到的问题,以及它的解决方案.")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v('最后我们可以知道,whistle是可以"修改 HTTP/HTTPS/Websocket 的请求","作为 HTTP 代理服务器","修改请求响应"等功能.感兴趣的小伙伴可以自行观看官方文档')])])}),[],!1,null,null,null);s.default=n.exports}}]);