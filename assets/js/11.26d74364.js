(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{409:function(n,e,a){"use strict";a.r(e);var t=a(56),r=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"使用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[n._v("#")]),n._v(" 使用方法")]),n._v(" "),a("p",[n._v("npm包的发布遵循semver 规范。例如1.2.3(Major,Minor,Patch)\nMajor:主版本号，通常只有在重构、API不向下兼容时才会进行升级\nMinor:次版本号，通常在增加向下兼容新特性时升级此版本号\nPatch:修订号，通常在发布向下兼容的问题修复时更新\nTag号:\nalpha:是内部测试版，一般不向外部发布，会有很多Bug，一般只有测试人员使用\nbeta:也是测试版，这个阶段的版本会一直加入新的功能。在Alpha版之后推出\nrc:Release　Candidate) 系统平台上就是发行候选版本。RC版不会再加入新的功能了，主要着重于除错")]),n._v(" "),a("p",[n._v("开发版本步骤:")]),n._v(" "),a("ol",[a("li",[n._v("先进行pnpm changeset pre enter alpha|beta|rc ,先把此次的提交先打开发tag.然后运行pnpm run changeset,选择需要更改的仓库,然后再运行pnpm run changeset version.进行版本的升级,版本升级完成之后,本地的仓库package.json的version就会变更1.0.0-alpha.0,然后就可以git commit 把这些信息一起提交到仓库.")]),n._v(" "),a("li",[n._v("当需要升级仓库版本至1.0.0-alpha.1的时候,现在本地仓库进行代码修改,然后运行pnpm run changeset选择需要更改的版本,然后运行pnpm run changeset version 升级版本,此时就会变成1.0.0-alpha.1了,如果所有的bug都修复好了,那么此时就可以跳出打tag,直接进行正式版本的发布.可以运行pnpm run changeset pre exit. 然后在运行npm run version-packages. 那么此时仓库的package.json的version就会变成1.0.0了.此时就可以发布了.")])])])}),[],!1,null,null,null);e.default=r.exports}}]);